pipeline {
    agent any
    tools {
        dependencyCheck 'dependency-check' // Add this if configured
        jdk 'jdk17'
        nodejs 'node24'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        NVD_API_KEY = credentials('nvd-api-key')
    }
    stages {
        stage("Clean Workspace") {
            steps {
                cleanWs()
            }
        }
        stage("Git Checkout") {
            steps {
                git 'https://github.com/Giri9608/DevOps-Project-Zomato-Kastro.git'
            }
        }
        stage("SonarQube Analysis") {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh '''$SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=zomato \
                        -Dsonar.projectKey=zomato'''
                }
            }
        }
        stage("Code Quality Gate") {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'Sonar-token'
                }
            }
        }
        stage("Install NPM Dependencies") {
            steps {
                sh "npm install"
            }
        }
        stage('OWASP FS SCAN') {
            steps {
                script {
                    sh '''mkdir -p dependency-check-reports
                        ${env.DEPENDENCY_CHECK_HOME}/bin/dependency-check.sh --scan ./ --disableYarnAudit --disableNodeAudit --update -n --nvdApiKey ${NVD_API_KEY} -o dependency-check-reports -f XML || true'''
                    dependencyCheckPublisher pattern: 'dependency-check-reports/dependency-check-report.xml', 
                        failedTotalCritical: 0, failedTotalHigh: 0, failedTotalMedium: 5, failedTotalLow: 10, unstableTotalAll: 100
                }
            }
        }
        stage("Trivy File Scan") {
            steps {
                sh "trivy fs . > trivy.txt"
            }
        }
        stage("Build Docker Image") {
            steps {
                sh "docker build -t zomato ."
            }
        }
        stage("Tag & Push to DockerHub") {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker') {
                        sh "docker tag zomato giri8608/zomato:latest"
                        sh "docker push giri8608/zomato:latest"
                    }
                }
            }
        }
        stage('Docker Scout Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {
                        timeout(time: 15, unit: 'MINUTES') {
                            sh 'docker-scout quickview giri8608/zomato:latest'
                            sh '''
                                docker-scout cves giri8608/zomato:latest --severity CRITICAL,HIGH > docker-scout-cves.txt
                                if grep -q "CRITICAL" docker-scout-cves.txt; then
                                    echo "Critical vulnerabilities found. Please review docker-scout-cves.txt."
                                else
                                    echo "No critical vulnerabilities found."
                                fi
                            '''
                            sh 'docker-scout recommendations giri8608/zomato:latest'
                        }
                    }
                }
            }
        }
        stage("Deploy to Container") {
            steps {
                sh 'docker rm -f zomato || true'
                sh 'docker run -d --name zomato -p 3000:3000 giri8608/zomato:latest'
            }
        }
    }
    post {
        always {
            emailext attachLog: true,
                subject: "'${currentBuild.result}'",
                body: """
                    <html>
                    <body>
                        <div style="background-color: #FFA07A; padding: 10px; margin-bottom: 10px;">
                            <p style="color: white; font-weight: bold;">Project: ${env.JOB_NAME}</p>
                        </div>
                        <div style="background-color: #90EE90; padding: 10px; margin-bottom: 10px;">
                            <p style="color: white; font-weight: bold;">Build Number: ${env.BUILD_NUMBER}</p>
                        </div>
                        <div style="background-color: #87CEEB; padding: 10px; margin-bottom: 10px;">
                            <p style="color: white; font-weight: bold;">URL: ${env.BUILD_URL}</p>
                        </div>
                    </body>
                    </html>
                """,
                to: 'giridharan9608@gmail.com',
                mimeType: 'text/html',
                attachmentsPattern: 'trivy.txt,docker-scout-cves.txt'
        }
    }
}
