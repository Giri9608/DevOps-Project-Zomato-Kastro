pipeline {
    agent any
    tools {
        jdk 'jdk17'
        nodejs 'node24'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        NVD_API_KEY = credentials('nvd-api-key') // Matches your credential ID
    }
    stages {
        stage("Clean Workspace") {
            steps {
                cleanWs()
            }
        }
        stage("Git Checkout") {
            steps {
                git 'https://github.com/Giri9608/DevOps-Project-Zomato-Kastro.git'
            }
        }
        stage("Sonarqube Analysis") {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh '''
                        $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=zomato \
                        -Dsonar.projectKey=zomato
                    '''
                }
            }
        }
        stage("Code Quality Gate") {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'Sonar-token'
                }
            }
        }
        stage("Install NPM Dependencies") {
            steps {
                sh 'npm install'
            }
        }
        stage("OWASP Dependency Check") {
            steps {
                withEnv(["NVD_API_KEY=${NVD_API_KEY}"]) {
                    script {
                        // Ensure the reports directory exists
                        sh 'mkdir -p reports'
                        // Run dependency check with corrected arguments and verbose logging
                        dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit --update -D nvd.api.key=$NVD_API_KEY -D nvd.datafeed.update.only=true -D reportFormat=XML -D outputDirectory=reports --log=DEBUG', odcInstallation: 'DP-Check'
                    }
                    // Publish the report with the specific path
                    dependencyCheckPublisher pattern: 'reports/dependency-check-report.xml'
                }
            }
        }
        stage("Trivy File Scan") {
            steps {
                sh 'trivy fs . > trivy.txt'
            }
        }
        stage("Build Docker Image") {
            steps {
                sh 'docker build -t zomato .'
            }
        }
        stage("Tag & Push to DockerHub") {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker') {
                        sh 'docker tag zomato giri8608/zomato:latest'
                        sh 'docker push giri8608/zomato:latest'
                    }
                }
            }
        }
        stage("Docker Scout Image Analysis") {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker') {
                        sh 'docker-scout quickview giri8608/zomato:latest'
                        sh 'docker-scout cves giri8608/zomato:latest'
                        sh 'docker-scout recommendations giri8608/zomato:latest'
                    }
                }
            }
        }
        stage("Deploy to Container") {
            steps {
                sh '''
                    # Stop and remove any existing container
                    docker rm -f zomato || true
                    docker run -d --name zomato -p 3000:3000 giri8608/zomato:latest
                '''
            }
        }
    }
    post {
        always {
            emailext (
                attachLog: true,
                subject: "'${currentBuild.result}'",
                body: """
                    <html>
                    <body>
                        <div style="background-color: #FFA07A; padding: 10px; margin-bottom: 10px;">
                            <p style="color: white; font-weight: bold;">Project: ${env.JOB_NAME}</p>
                        </div>
                        <div style="background-color: #90EE90; padding: 10px; margin-bottom: 10px;">
                            <p style="color: white; font-weight: bold;">Build Number: ${env.BUILD_NUMBER}</p>
                        </div>
                        <div style="background-color: #87CEEB; padding: 10px; margin-bottom: 10px;">
                            <p style="color: white; font-weight: bold;">URL: ${env.BUILD_URL}</p>
                        </div>
                    </body>
                    </html>
                """,
                to: 'giridharan9608@gmail.com',
                mimeType: 'text/html',
                attachmentsPattern: 'trivy.txt'
            )
        }
    }
}
