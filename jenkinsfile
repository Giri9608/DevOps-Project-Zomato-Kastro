pipeline {
    agent any
    tools {
        jdk 'jdk17'
        nodejs 'node24'
    }
    environment {
        SCANNER_HOME=tool 'sonar-scanner'
    }
    stages {
        stage ("clean workspace") {
            steps {
                cleanWs()
            }
        }
        stage ("Git Checkout") {
            steps {
                git 'https://github.com/Giri9608/DevOps-Project-Zomato-Kastro.git'
            }
        }
        stage("Sonarqube Analysis"){
            steps{
                withSonarQubeEnv('sonar-server') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner \
                    -Dsonar.projectName=zomato \
                    -Dsonar.projectKey=zomato \
                    -Dsonar.sources=. \
                    -Dsonar.host.url=$SONAR_HOST_URL \
                    -Dsonar.login=$SONAR_AUTH_TOKEN '''
                }
            }
        }
        stage("Code Quality Gate"){
           steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-auth-token'
                }
            }
        }
        stage("Install NPM Dependencies") {
            steps {
                sh "npm install"
            }
        }
        stage('OWASP FS SCAN') {
            steps {
                script {
                    try {
                        withCredentials([string(credentialsId: 'nvd-api-key', variable: 'NVD_API_KEY')]) {
                            dependencyCheck additionalArguments: """
                                --scan ./
                                --disableYarnAudit
                                --disableNodeAudit
                                --nvdApiKey ${NVD_API_KEY}
                                --format XML
                                --format HTML
                                --out ./dependency-check-report
                                --project zomato
                                --enableRetired
                                -n
                            """,
                            odcInstallation: 'DP-Check'

                            dependencyCheckPublisher pattern: 'dependency-check-report.xml'
                        }
                    } catch (Exception e) {
                        echo "OWASP Dependency Check failed: ${e.getMessage()}"
                        echo "This is likely due to database initialization on first run."
                        echo "The scan will work on subsequent runs. Continuing pipeline..."
                        // Don't fail the entire pipeline for this
                        unstable("OWASP scan failed - database initialization required")
                    }
                }
            }
        }
        stage ("Trivy File Scan") {
            steps {
                sh "trivy fs . > trivy.txt"
            }
        }
        stage ("Build Docker Image") {
            steps {
                sh "docker build -t zomato ."
            }
        }
        stage ("Tag & Push to DockerHub") {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker') {
                        sh "docker tag zomato giri8608/zomato:latest "
                        sh "docker push giri8608/zomato:latest "
                    }
                }
            }
        }
        stage('Docker Scout Image') {
            steps {
                script{
                   withDockerRegistry(credentialsId: 'docker', toolName: 'docker'){
                       sh 'docker-scout quickview giri8608/zomato:latest'
                       sh 'docker-scout cves giri8608/zomato:latest'
                       sh 'docker-scout recommendations giri8608/zomato:latest'
                   }
                }
            }
        }
        stage ("Deploy to Container") {
            steps {
                script {
                    sh '''
                        docker stop zomato || true
                        docker rm zomato || true
                        docker run -d --name zomato -p 3000:3000 giri8608/zomato:latest
                    '''
                }
            }
        }
    }
    post {
        always {
            archiveArtifacts artifacts: 'trivy.txt,dependency-check-report.*', allowEmptyArchive: true

            emailext attachLog: true,
                subject: "'${currentBuild.result}' - Zomato App Pipeline",
                body: """
                    <html>
                    <body>
                        <div style="background-color: #FFA07A; padding: 10px; margin-bottom: 10px;">
                            <p style="color: white; font-weight: bold;">Project: ${env.JOB_NAME}</p>
                        </div>
                        <div style="background-color: #90EE90; padding: 10px; margin-bottom: 10px;">
                            <p style="color: white; font-weight: bold;">Build Number: ${env.BUILD_NUMBER}</p>
                        </div>
                        <div style="background-color: #87CEEB; padding: 10px; margin-bottom: 10px;">
                            <p style="color: white; font-weight: bold;">URL: ${env.BUILD_URL}</p>
                        </div>
                        <div style="background-color: #FFE4B5; padding: 10px; margin-bottom: 10px;">
                            <p style="color: black; font-weight: bold;">Application URL: http://your-server-ip:3000</p>
                        </div>
                    </body>
                    </html>
                """,
                to: 'giridharan9608@gmail.com',
                mimeType: 'text/html',
                attachmentsPattern: 'trivy.txt'
        }
    }
}

